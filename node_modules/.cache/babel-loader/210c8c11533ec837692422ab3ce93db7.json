{"ast":null,"code":"import _slicedToArray from\"C:\\\\Projetos3\\\\react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import _objectSpread from\"C:\\\\Projetos3\\\\react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"C:\\\\Projetos3\\\\react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";import React,{useState,useEffect}from'react';import{Grid,TextField,withStyles,FormControl,InputLabel,Select,MenuItem,Button,FormHelperText}from'@material-ui/core';import useForm from\"./useForm\";import{connect}from'react-redux';import*as actions from'../Actions/genero';import{useToasts}from'react-toast-notifications';import dayjs from'dayjs';var styles=function styles(theme){return{root:{'& .MuiTextField-root':{margin:theme.spacing(1),minWidth:230}},formControl:{margin:theme.spacing(1),minWidth:230},smMargin:{margin:theme.spacing(1)}};};var initialFieldValues={nome:'',dataCriacao:'',ativo:''};var GenerosForms=function GenerosForms(_ref){var classes=_ref.classes,props=_objectWithoutProperties(_ref,[\"classes\"]);//toast  \nvar _useToasts=useToasts(),addToast=_useToasts.addToast;//validação de campos\nvar validate=function validate(){var fieldValues=arguments.length>0&&arguments[0]!==undefined?arguments[0]:values;var temp=_objectSpread({},errors);// if('usuario' in fieldValues)\n//     temp.usuario = fieldValues.usuario? \"\" : \"Campo Obrigatório.\"\n// // if(!fieldValues.senha)\n// //     temp.senha = fieldValues.senha? \"\" : \"Campo Obrigatório.\"\n// if('senha' in fieldValues)\n// temp.senha = fieldValues.senha? \"\" : \"Campo Obrigatório.\"\nsetErrors(_objectSpread({},temp));// if(fieldValues == values){\n//     return Object.values(temp).every(x => x == \"\")\n// }\n};var _useForm=useForm(initialFieldValues,validate,props.setCurrentId),values=_useForm.values,setValues=_useForm.setValues,errors=_useForm.errors,setErrors=_useForm.setErrors,handleInputChange=_useForm.handleInputChange,resetForm=_useForm.resetForm;//material-ui select\nvar inputLabel=React.useRef(null);var _React$useState=React.useState(0),_React$useState2=_slicedToArray(_React$useState,2),labelWidth=_React$useState2[0],setLabelWidth=_React$useState2[1];React.useEffect(function(){setLabelWidth(inputLabel.current.offsetWidth);},[]);var handleSubmit=function handleSubmit(e){e.preventDefault();//  if(validate()) {\nvar onSuccess=function onSuccess(){resetForm();addToast(\"Gênero cadastrado com sucesso!\",{appearance:'success'});};// values.dataCriacao = dayjs(new Date()).format('YYYY-MM-DD')\nvalues.dataCriacao=dayjs().format('YYYY-MM-DD');if(props.currentId==0){// if(name == \"incluir\"){\nprops.createGeneros(values,onSuccess);// }            \n}else{props.updateGenero(props.currentId,values,onSuccess);}//  }\n};var onDeleteAll=function onDeleteAll(){if(window.confirm('Confirmar exclusão dos registros?')){props.generoList.map(function(record,index){props.deleteGenero(record.id,function(){return addToast(\"Exclusão realizada com sucesso!\",{appearance:'info'});});});}};useEffect(function(){console.log(props.currentId);if(props.currentId!=0){setValues(_objectSpread({},props.generoList.find(function(genero){return genero.id==props.currentId;})));setErrors({});}},[props.currentId]);return/*#__PURE__*/React.createElement(\"form\",{autoComplete:\"off\",noValidate:true,className:classes.root,onSubmit:handleSubmit},\"Cadastro de G\\xEAneros\",/*#__PURE__*/React.createElement(Grid,{container:true},/*#__PURE__*/React.createElement(Grid,{Item:true,xs:6},/*#__PURE__*/React.createElement(TextField,Object.assign({name:\"nome\",variant:\"outlined\",label:\"Nome\",value:values.nome,onChange:handleInputChange},errors.nome&&{error:true,helperText:errors.nome})),/*#__PURE__*/React.createElement(FormControl,Object.assign({variant:\"outlined\",className:classes.formControl},errors.ativo&&{error:true}),/*#__PURE__*/React.createElement(InputLabel,{ref:inputLabel},\"Situa\\xE7\\xE3o\"),/*#__PURE__*/React.createElement(Select,{name:\"ativo\",value:values.ativo,onChange:handleInputChange,labelWidth:labelWidth},/*#__PURE__*/React.createElement(MenuItem,{value:\"\"},\"Selecione\"),/*#__PURE__*/React.createElement(MenuItem,{value:\"Ativo\"},\"Ativo\"),/*#__PURE__*/React.createElement(MenuItem,{value:\"Inativo\"},\"Inativo\")),errors.ativo&&/*#__PURE__*/React.createElement(FormHelperText,null,errors.ativo)),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{variant:\"contained\",color:\"primary\",name:\"incluir\",type:\"submit\",className:classes.smMargin},\"Submit\"),/*#__PURE__*/React.createElement(\"button\",{variant:\"contained\",name:\"deletar\",type:\"button\",className:classes.smMargin,onClick:onDeleteAll},\"Excluir Lista\")))));};var mapStateToProps=function mapStateToProps(state){return{generoList:state.genero.list};};var mapActionToProps={createGeneros:actions.create,updateGenero:actions.update,deleteGenero:actions.Delete};export default connect(mapStateToProps,mapActionToProps)(withStyles(styles)(GenerosForms));","map":{"version":3,"sources":["C:/Projetos3/react-app/src/Components/GeneroForm.js"],"names":["React","useState","useEffect","Grid","TextField","withStyles","FormControl","InputLabel","Select","MenuItem","Button","FormHelperText","useForm","connect","actions","useToasts","dayjs","styles","theme","root","margin","spacing","minWidth","formControl","smMargin","initialFieldValues","nome","dataCriacao","ativo","GenerosForms","classes","props","addToast","validate","fieldValues","values","temp","errors","setErrors","setCurrentId","setValues","handleInputChange","resetForm","inputLabel","useRef","labelWidth","setLabelWidth","current","offsetWidth","handleSubmit","e","preventDefault","onSuccess","appearance","format","currentId","createGeneros","updateGenero","onDeleteAll","window","confirm","generoList","map","record","index","deleteGenero","id","console","log","find","genero","error","helperText","mapStateToProps","state","list","mapActionToProps","create","update","Delete"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Grid, TextField, withStyles, FormControl, InputLabel, Select, MenuItem, Button, FormHelperText } from '@material-ui/core';\r\nimport useForm from \"./useForm\";\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../Actions/genero'\r\nimport { useToasts } from 'react-toast-notifications'\r\nimport  dayjs  from 'dayjs'\r\n\r\nconst styles = theme =>({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n    smMargin:{\r\n        margin: theme.spacing(1)\r\n    }\r\n})\r\n\r\nconst initialFieldValues ={\r\n    nome : '',\r\n    dataCriacao : '',\r\n    ativo : ''\r\n}\r\n\r\nconst GenerosForms = ({ classes, ...props }) => {\r\n\r\n    //toast  \r\n    const { addToast } = useToasts()\r\n\r\n    //validação de campos\r\n const validate = (fieldValues = values) => {\r\n    let temp = { ...errors }\r\n    // if('usuario' in fieldValues)\r\n    //     temp.usuario = fieldValues.usuario? \"\" : \"Campo Obrigatório.\"\r\n    // // if(!fieldValues.senha)\r\n    // //     temp.senha = fieldValues.senha? \"\" : \"Campo Obrigatório.\"\r\n    // if('senha' in fieldValues)\r\n    // temp.senha = fieldValues.senha? \"\" : \"Campo Obrigatório.\"\r\n    setErrors({\r\n        ...temp\r\n    })\r\n\r\n    // if(fieldValues == values){\r\n    //     return Object.values(temp).every(x => x == \"\")\r\n    // }\r\n\r\n }\r\n     \r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    } = useForm(initialFieldValues, validate, props.setCurrentId)\r\n\r\n    //material-ui select\r\n    const inputLabel = React.useRef(null);\r\n    const [labelWidth, setLabelWidth] = React.useState(0);\r\n    React.useEffect(() => {\r\n        setLabelWidth(inputLabel.current.offsetWidth);\r\n    }, []);\r\n\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        //  if(validate()) {\r\n            const onSuccess = () => { \r\n                resetForm()\r\n                addToast(\"Gênero cadastrado com sucesso!\", { appearance: 'success' })\r\n            }\r\n\r\n            // values.dataCriacao = dayjs(new Date()).format('YYYY-MM-DD')\r\n            values.dataCriacao = dayjs().format('YYYY-MM-DD')\r\n           \r\n            if(props.currentId == 0 ){\r\n                // if(name == \"incluir\"){\r\n                     props.createGeneros(values, onSuccess)\r\n                // }            \r\n            }else{\r\n                props.updateGenero(props.currentId,values, onSuccess)\r\n            }    \r\n            \r\n        //  }\r\n    }\r\n\r\n    const onDeleteAll = (() => {\r\n        \r\n        if(window.confirm('Confirmar exclusão dos registros?'))\r\n        {\r\n            props.generoList.map((record, index) => {\r\n            props.deleteGenero(record.id,() => addToast(\"Exclusão realizada com sucesso!\", { appearance: 'info' }))    \r\n            })\r\n        }\r\n\r\n        \r\n      })\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(props.currentId)\r\n        if(props.currentId != 0) {\r\n            setValues({\r\n                ...props.generoList.find(genero => genero.id == props.currentId)\r\n            })\r\n            setErrors({})\r\n        }\r\n    }, [props.currentId])\r\n\r\n\r\n    return (\r\n    <form autoComplete=\"off\" noValidate className={classes.root} onSubmit={handleSubmit}>\r\n        Cadastro de Gêneros\r\n      <Grid container>\r\n        <Grid Item xs ={6}>\r\n            <TextField\r\n                name= \"nome\"\r\n                variant = \"outlined\"\r\n                label=\"Nome\"\r\n                value={values.nome}\r\n                onChange={handleInputChange}\r\n                {...(errors.nome && { error: true, helperText: errors.nome })}\r\n                \r\n            />\r\n            {/* <TextField\r\n            disabled\r\n                name= \"dataCriacao\"\r\n                id=\"outlined-disabled\"  \r\n                variant = \"outlined\"\r\n                label=\"Data criação\"\r\n                type=\"date\"\r\n                value={values.dataCriacao}\r\n                onChange={handleInputChange}\r\n                {...(errors.dataCriacao && { error: true, helperText: errors.dataCriacao })}\r\n                \r\n            /> */}\r\n            {/* <TextField\r\n                disabled\r\n                id=\"date\"\r\n                name= \"dataCriacao\"\r\n                label=\"Data Criação\"\r\n                type=\"date\"\r\n                // value=\r\n                onChange={( e ) => { values.dataCriacao = e.target.value } }\r\n                // value={values.dataCriacao}\r\n                // defaultValue = {dayjs().format('DD/MM/YYYY')}\r\n                className={classes.textField}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n            /> */}\r\n            \r\n            <FormControl variant=\"outlined\"\r\n                        className={classes.formControl}\r\n                        {...(errors.ativo && { error: true })}\r\n                    >\r\n                        <InputLabel ref={inputLabel}>Situação</InputLabel>\r\n                        <Select\r\n                            name=\"ativo\"\r\n                            value={values.ativo}\r\n                            onChange={handleInputChange}\r\n                            labelWidth={labelWidth}\r\n                        >\r\n                            <MenuItem value=\"\">Selecione</MenuItem>\r\n                            <MenuItem value=\"Ativo\">Ativo</MenuItem>\r\n                            <MenuItem value=\"Inativo\">Inativo</MenuItem>\r\n                        </Select>\r\n                        {errors.ativo && <FormHelperText>{errors.ativo}</FormHelperText>}\r\n                    </FormControl>\r\n\r\n            {/* campo situacao */}\r\n            \r\n            {/* <TextField\r\n                name= \"senha\"\r\n                variant = \"outlined\"\r\n                label=\"Senha\"\r\n                type=\"password\"\r\n                value={values.senha}\r\n                onChange={handleInputChange}\r\n                {...(errors.senha && { error: true, helperText: errors.senha })}\r\n            /> */}\r\n            <div>\r\n                <button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    name=\"incluir\"\r\n                    type=\"submit\"\r\n                    className={classes.smMargin}                \r\n                >\r\n                    Submit\r\n                </button>\r\n\r\n                {/* <button\r\n                    variant=\"contained\"\r\n                    className={classes.smMargin}                \r\n                    onClick={resetForm}\r\n                >\r\n                    Reset\r\n                </button> */}\r\n\r\n                <button\r\n                    variant=\"contained\"\r\n                    name=\"deletar\"\r\n                    type=\"button\"\r\n                    className={classes.smMargin}                \r\n                    onClick={ onDeleteAll }\r\n                >\r\n                    Excluir Lista\r\n                </button>\r\n            </div>\r\n        </Grid>\r\n      </Grid>\r\n\r\n    </form>\r\n  )\r\n}\r\nconst mapStateToProps = state => ({\r\n    generoList: state.genero.list\r\n})\r\n  \r\nconst mapActionToProps = {\r\n    createGeneros: actions.create,\r\n    updateGenero: actions.update,\r\n    deleteGenero: actions.Delete\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(GenerosForms));\r\n"]},"metadata":{},"sourceType":"module"}