{"ast":null,"code":"import _objectSpread from\"C:\\\\Projetos3\\\\react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"C:\\\\Projetos3\\\\react-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";import React,{useState,useEffect}from'react';import{Grid,TextField,withStyles,FormControl,InputLabel,Select,MenuItem,Button,FormHelperText}from'@material-ui/core';import useForm from\"./useForm\";import{connect}from'react-redux';import*as actions from'../Actions/usuario';import{useToasts}from'react-toast-notifications';var styles=function styles(theme){return{root:{'& .MuiTextField-root':{margin:theme.spacing(1),minWidth:230}},formControl:{margin:theme.spacing(1),minWidth:230},smMargin:{margin:theme.spacing(1)}};};var initialFieldValues={usuario:'',senha:''};var UsuariosForms=function UsuariosForms(_ref){var classes=_ref.classes,props=_objectWithoutProperties(_ref,[\"classes\"]);//toast  \nvar _useToasts=useToasts(),addToast=_useToasts.addToast;var validate=function validate(){var fieldValues=arguments.length>0&&arguments[0]!==undefined?arguments[0]:values;var temp=_objectSpread({},errors);if('usuario'in fieldValues)temp.usuario=fieldValues.usuario?\"\":\"Campo Obrigatório.\";// // if(!fieldValues.senha)\n// //     temp.senha = fieldValues.senha? \"\" : \"Campo Obrigatório.\"\n// if('senha' in fieldValues)\n// temp.senha = fieldValues.senha? \"\" : \"Campo Obrigatório.\"\nsetErrors(_objectSpread({},temp));// if(fieldValues == values){\n//     return Object.values(temp).every(x => x == \"\")\n// }\n};var _useForm=useForm(initialFieldValues,validate,props.setCurrentId),values=_useForm.values,setValues=_useForm.setValues,errors=_useForm.errors,setErrors=_useForm.setErrors,handleInputChange=_useForm.handleInputChange,resetForm=_useForm.resetForm;var handleSubmit=function handleSubmit(e){e.preventDefault();//  if(validate()) {\nvar onSuccess=function onSuccess(){resetForm();addToast(\"Cadastro realziado com sucesso!\",{appearance:'success'});};if(props.currentId==0){props.createUsuarios(values,onSuccess);}else{props.updateUsuario(props.currentId,values,onSuccess);}//  }\n};useEffect(function(){if(props.currentId!=0){setValues(_objectSpread({},props.usuarioList.find(function(usuario){return usuario.idUsuario==props.currentId;})));setErrors({});}},[props.currentId]);return/*#__PURE__*/React.createElement(\"form\",{autoComplete:\"off\",noValidate:true,className:classes.root,onSubmit:handleSubmit,label:\"teste\"},\"Cadastro de Usu\\xE1rios\",/*#__PURE__*/React.createElement(Grid,{container:true},/*#__PURE__*/React.createElement(Grid,{Item:true,xs:6},/*#__PURE__*/React.createElement(TextField,Object.assign({name:\"usuario\",variant:\"outlined\",label:\"Usu\\xE1rio\",value:values.usuario,onChange:handleInputChange},errors.usuario&&{error:true,helperText:errors.usuario})),/*#__PURE__*/React.createElement(TextField,Object.assign({name:\"senha\",variant:\"outlined\",label:\"Senha\",type:\"password\",value:values.senha,onChange:handleInputChange},errors.senha&&{error:true,helperText:errors.senha})),/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{variant:\"contained\",color:\"primary\",type:\"submit\",className:classes.smMargin},\"Cadastrar\")))));};var mapStateToProps=function mapStateToProps(state){return{usuarioList:state.usuario.list};};var mapActionToProps={createUsuarios:actions.create,updateUsuario:actions.update};export default connect(mapStateToProps,mapActionToProps)(withStyles(styles)(UsuariosForms));","map":{"version":3,"sources":["C:/Projetos3/react-app/src/Components/UsuarioForms.js"],"names":["React","useState","useEffect","Grid","TextField","withStyles","FormControl","InputLabel","Select","MenuItem","Button","FormHelperText","useForm","connect","actions","useToasts","styles","theme","root","margin","spacing","minWidth","formControl","smMargin","initialFieldValues","usuario","senha","UsuariosForms","classes","props","addToast","validate","fieldValues","values","temp","errors","setErrors","setCurrentId","setValues","handleInputChange","resetForm","handleSubmit","e","preventDefault","onSuccess","appearance","currentId","createUsuarios","updateUsuario","usuarioList","find","idUsuario","error","helperText","mapStateToProps","state","list","mapActionToProps","create","update"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { Grid, TextField, withStyles, FormControl, InputLabel, Select, MenuItem, Button, FormHelperText } from '@material-ui/core';\r\nimport useForm from \"./useForm\";\r\nimport { connect } from 'react-redux'\r\nimport * as actions from '../Actions/usuario'\r\nimport { useToasts } from 'react-toast-notifications'\r\n\r\nconst styles = theme =>({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            minWidth: 230,\r\n        }\r\n    },\r\n\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 230,\r\n    },\r\n\r\n    smMargin:{\r\n        margin: theme.spacing(1)\r\n    }\r\n})\r\n\r\nconst initialFieldValues ={\r\n    usuario : '',\r\n    senha : ''\r\n}\r\n\r\nconst UsuariosForms = ({classes, ...props}) => {\r\n\r\n    //toast  \r\n    const { addToast } = useToasts()\r\n\r\n    const validate = (fieldValues = values) => {\r\n        let temp = { ...errors }\r\n        if('usuario' in fieldValues)\r\n            temp.usuario = fieldValues.usuario? \"\" : \"Campo Obrigatório.\"\r\n        // // if(!fieldValues.senha)\r\n        // //     temp.senha = fieldValues.senha? \"\" : \"Campo Obrigatório.\"\r\n        // if('senha' in fieldValues)\r\n        // temp.senha = fieldValues.senha? \"\" : \"Campo Obrigatório.\"\r\n        setErrors({\r\n            ...temp\r\n        })\r\n    \r\n        // if(fieldValues == values){\r\n        //     return Object.values(temp).every(x => x == \"\")\r\n        // }\r\n    \r\n    }\r\n\r\n    const {\r\n        values,\r\n        setValues,\r\n        errors,\r\n        setErrors,\r\n        handleInputChange,\r\n        resetForm\r\n    } = useForm(initialFieldValues, validate, props.setCurrentId)\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault()\r\n        //  if(validate()) {\r\n            const onSuccess = () => { \r\n                resetForm()\r\n                addToast(\"Cadastro realziado com sucesso!\", { appearance: 'success' })\r\n            }\r\n            if(props.currentId == 0 ){\r\n                 props.createUsuarios(values, onSuccess)\r\n            }else{\r\n                props.updateUsuario(props.currentId,values, onSuccess)\r\n            }    \r\n            \r\n        //  }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(props.currentId != 0) {\r\n            setValues({\r\n                ...props.usuarioList.find(usuario => usuario.idUsuario == props.currentId)\r\n            })\r\n            setErrors({})\r\n        }\r\n    }, [props.currentId])\r\n\r\n    return (\r\n        <form autoComplete=\"off\" noValidate className = { classes.root } onSubmit={handleSubmit} label = \"teste\">\r\n        Cadastro de Usuários\r\n          <Grid container>\r\n            <Grid Item xs ={6}>\r\n                <TextField\r\n                    name= \"usuario\"\r\n                    variant = \"outlined\"\r\n                    label=\"Usuário\"\r\n                    value={values.usuario}\r\n                    onChange={handleInputChange}\r\n                    {...(errors.usuario && { error: true, helperText: errors.usuario })}\r\n                    \r\n                />\r\n                <TextField\r\n                    name= \"senha\"\r\n                    variant = \"outlined\"\r\n                    label=\"Senha\"\r\n                    type=\"password\"\r\n                    value={values.senha}\r\n                    onChange={handleInputChange}\r\n                    {...(errors.senha && { error: true, helperText: errors.senha })}\r\n                />\r\n                <div>\r\n                    <button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        type=\"submit\"\r\n                        className={classes.smMargin}                \r\n                    >\r\n                        Cadastrar\r\n                    </button>\r\n    \r\n                    {/* <button\r\n                        variant=\"contained\"\r\n                        className={classes.smMargin}                \r\n                        onClick={resetForm}\r\n                    >\r\n                        Reset\r\n                    </button> */}\r\n    \r\n    \r\n                </div>\r\n            </Grid>\r\n          </Grid>\r\n    \r\n        </form>\r\n      );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    usuarioList: state.usuario.list\r\n})\r\n  \r\n  const mapActionToProps = {\r\n    createUsuarios: actions.create,\r\n    updateUsuario: actions.update\r\n}\r\n\r\nexport default connect(mapStateToProps, mapActionToProps)(withStyles(styles)(UsuariosForms));\r\n"]},"metadata":{},"sourceType":"module"}